name: üöÄ Advanced Deployment Pipeline

on:
  push:
    branches: [main, develop, release/*]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
          - canary
      deployment_strategy:
        description: 'Deployment strategy'
        required: true
        default: 'rolling'
        type: choice
        options:
          - rolling
          - blue-green
          - canary
      rollback:
        description: 'Rollback to previous version'
        required: false
        default: false
        type: boolean

concurrency:
  group: deployment-${{ github.ref }}-${{ github.event.inputs.environment || 'auto' }}
  cancel-in-progress: false # Never cancel deployments

env:
  NODE_VERSION: '20'
  BUN_VERSION: 'latest'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Pre-deployment Validation
  pre-deployment:
    name: üîç Pre-deployment Validation
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.determine-env.outputs.environment }}
      strategy: ${{ steps.determine-strategy.outputs.strategy }}
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine Environment
        id: determine-env
        run: |
          if [[ "${{ github.event.inputs.environment }}" != "" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/heads/release/* ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
          else
            echo "environment=preview" >> $GITHUB_OUTPUT
          fi

      - name: Determine Strategy
        id: determine-strategy
        run: |
          env="${{ steps.determine-env.outputs.environment }}"
          strategy="${{ github.event.inputs.deployment_strategy || 'rolling' }}"
          
          if [[ "$env" == "production" ]]; then
            strategy="blue-green"
          elif [[ "$env" == "canary" ]]; then
            strategy="canary"
          fi
          
          echo "strategy=$strategy" >> $GITHUB_OUTPUT

      - name: Generate Version
        id: version
        run: |
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            echo "version=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          else
            echo "version=v$(date +%Y%m%d%H%M%S)-${GITHUB_SHA:0:8}" >> $GITHUB_OUTPUT
          fi

      - name: Validate Deployment Readiness
        run: |
          echo "üîç Validating deployment readiness..."
          
          # Check if there are any critical security vulnerabilities
          if [[ -f "security-scan-results.json" ]]; then
            critical_vulns=$(jq '.vulnerabilities[] | select(.severity == "critical")' security-scan-results.json | wc -l)
            if [[ $critical_vulns -gt 0 ]]; then
              echo "‚ùå Critical security vulnerabilities found. Deployment blocked."
              exit 1
            fi
          fi
          
          echo "‚úÖ Deployment validation passed"

  # Build and Package
  build-and-package:
    name: üì¶ Build & Package
    runs-on: ubuntu-latest
    needs: pre-deployment
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build application
        run: bun run build
        env:
          NODE_ENV: production
          NEXT_PUBLIC_VERSION: ${{ needs.pre-deployment.outputs.version }}

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=raw,value=${{ needs.pre-deployment.outputs.version }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.pre-deployment.outputs.version }}
            BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
            VCS_REF=${{ github.sha }}

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ steps.meta.outputs.tags }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.spdx.json

  # Security Scan of Built Image
  image-security-scan:
    name: üîí Image Security Scan
    runs-on: ubuntu-latest
    needs: [pre-deployment, build-and-package]
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build-and-package.outputs.image-tag }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # Deploy to Staging
  deploy-staging:
    name: üöÄ Deploy to Staging
    runs-on: ubuntu-latest
    needs: [pre-deployment, build-and-package, image-security-scan]
    if: needs.pre-deployment.outputs.environment == 'staging'
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Deploy to Staging
        id: deploy
        run: |
          echo "Deploying to staging environment..."
          echo "Image: ${{ needs.build-and-package.outputs.image-tag }}"
          echo "Strategy: ${{ needs.pre-deployment.outputs.strategy }}"
          
          # Deploy using your preferred method (Vercel, AWS, etc.)
          # Example with Vercel:
          # vercel deploy --prod --token ${{ secrets.VERCEL_TOKEN }}
          
          echo "url=https://staging.thorbis.com" >> $GITHUB_OUTPUT

      - name: Health Check
        run: |
          echo "Performing health check..."
          sleep 30
          curl -f ${{ steps.deploy.outputs.url }}/api/health || exit 1

      - name: Smoke Tests
        run: |
          echo "Running smoke tests..."
          # Add smoke test commands here

  # Blue-Green Production Deployment
  deploy-production-blue-green:
    name: üîµüü¢ Blue-Green Production Deploy
    runs-on: ubuntu-latest
    needs: [pre-deployment, build-and-package, image-security-scan]
    if: needs.pre-deployment.outputs.environment == 'production' && needs.pre-deployment.outputs.strategy == 'blue-green'
    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Deploy to Blue Environment
        id: deploy-blue
        run: |
          echo "Deploying to blue environment..."
          echo "Image: ${{ needs.build-and-package.outputs.image-tag }}"
          
          # Deploy to blue environment
          # kubectl set image deployment/app app=${{ needs.build-and-package.outputs.image-tag }} -n blue
          
          echo "blue-url=https://blue.thorbis.com" >> $GITHUB_OUTPUT

      - name: Blue Environment Health Check
        run: |
          echo "Health checking blue environment..."
          sleep 60
          curl -f ${{ steps.deploy-blue.outputs.blue-url }}/api/health || exit 1

      - name: Blue Environment Smoke Tests
        run: |
          echo "Running smoke tests on blue environment..."
          # Run comprehensive smoke tests

      - name: Traffic Switch to Blue
        id: traffic-switch
        run: |
          echo "Switching traffic to blue environment..."
          # Switch load balancer to blue environment
          # kubectl patch service/app -p '{"spec":{"selector":{"version":"blue"}}}' -n production
          
          echo "url=https://thorbis.com" >> $GITHUB_OUTPUT

      - name: Monitor Blue Environment
        run: |
          echo "Monitoring blue environment for 5 minutes..."
          sleep 300
          
          # Check metrics and logs
          # If issues detected, rollback to green

      - name: Decommission Green Environment
        run: |
          echo "Decommissioning old green environment..."
          # Scale down green environment

  # Canary Deployment
  deploy-canary:
    name: üê¶ Canary Deployment
    runs-on: ubuntu-latest
    needs: [pre-deployment, build-and-package, image-security-scan]
    if: needs.pre-deployment.outputs.strategy == 'canary'
    environment:
      name: production-canary
      url: ${{ steps.deploy.outputs.url }}
    strategy:
      matrix:
        traffic_percentage: [10, 25, 50, 100]
    steps:
      - name: Deploy Canary - ${{ matrix.traffic_percentage }}%
        id: deploy
        run: |
          echo "Deploying canary with ${{ matrix.traffic_percentage }}% traffic..."
          echo "Image: ${{ needs.build-and-package.outputs.image-tag }}"
          
          # Deploy canary with traffic percentage
          # kubectl set image deployment/app-canary app=${{ needs.build-and-package.outputs.image-tag }}
          # istio/envoy traffic splitting configuration
          
          echo "url=https://thorbis.com" >> $GITHUB_OUTPUT

      - name: Monitor Canary Metrics
        run: |
          echo "Monitoring canary metrics for 10 minutes..."
          sleep 600
          
          # Monitor error rates, latency, and other key metrics
          # If metrics are good, proceed to next percentage
          # If metrics are bad, rollback

      - name: Canary Analysis
        run: |
          echo "Analyzing canary performance..."
          # Automated canary analysis
          # Compare metrics between canary and stable versions

  # Database Migrations
  database-migration:
    name: üóÑÔ∏è Database Migration
    runs-on: ubuntu-latest
    needs: [pre-deployment]
    if: needs.pre-deployment.outputs.environment == 'production' || needs.pre-deployment.outputs.environment == 'staging'
    environment: ${{ needs.pre-deployment.outputs.environment }}-db
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Database Backup
        run: |
          echo "Creating database backup..."
          # Create database backup before migration
          # pg_dump or equivalent backup command

      - name: Run Database Migrations
        run: |
          echo "Running database migrations..."
          bun run db:migrate
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Verify Migration
        run: |
          echo "Verifying migration success..."
          bun run db:verify

  # Post-deployment Monitoring
  post-deployment:
    name: üìä Post-deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production-blue-green, deploy-canary]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production-blue-green.result == 'success' || needs.deploy-canary.result == 'success')
    steps:
      - name: Setup Enhanced Monitoring
        run: |
          echo "Setting up enhanced monitoring..."
          # Enable enhanced monitoring for 2 hours post-deployment
          curl -X POST "${{ secrets.MONITORING_API_URL }}/alerts/enhance" \
            -H "Authorization: Bearer ${{ secrets.MONITORING_API_TOKEN }}" \
            -d '{
              "duration": 7200,
              "deployment": "${{ github.sha }}",
              "version": "${{ needs.pre-deployment.outputs.version }}"
            }'

      - name: Synthetic Transaction Tests
        run: |
          echo "Running synthetic transaction tests..."
          # Run synthetic tests to verify key user journeys

      - name: Performance Baseline
        run: |
          echo "Establishing performance baseline..."
          # Run performance tests and establish baseline metrics

  # Automated Rollback
  rollback:
    name: üîÑ Automated Rollback
    runs-on: ubuntu-latest
    if: failure() || github.event.inputs.rollback == 'true'
    needs: [pre-deployment, deploy-staging, deploy-production-blue-green, deploy-canary]
    environment: ${{ needs.pre-deployment.outputs.environment }}
    steps:
      - name: Get Previous Deployment
        id: previous
        run: |
          echo "Getting previous successful deployment..."
          # Query deployment history to get previous version
          echo "previous-version=v20240101120000-abcd1234" >> $GITHUB_OUTPUT

      - name: Rollback Deployment
        run: |
          echo "Rolling back to version: ${{ steps.previous.outputs.previous-version }}"
          # Execute rollback to previous version
          
          case "${{ needs.pre-deployment.outputs.strategy }}" in
            "blue-green")
              echo "Switching traffic back to green environment..."
              # Switch load balancer back to green
              ;;
            "canary")
              echo "Removing canary deployment..."
              # Remove canary and route all traffic to stable
              ;;
            "rolling")
              echo "Rolling back deployment..."
              # Rollback to previous version
              ;;
          esac

      - name: Verify Rollback
        run: |
          echo "Verifying rollback success..."
          sleep 60
          # Verify application is working with previous version

      - name: Rollback Notification
        run: |
          curl -X POST "${{ secrets.SLACK_WEBHOOK_URL }}" \
            -H 'Content-type: application/json' \
            --data '{
              "text": "üîÑ Rollback executed for ${{ github.repository }}",
              "attachments": [{
                "color": "warning",
                "fields": [{
                  "title": "Environment",
                  "value": "${{ needs.pre-deployment.outputs.environment }}",
                  "short": true
                }, {
                  "title": "Rolled back to",
                  "value": "${{ steps.previous.outputs.previous-version }}",
                  "short": true
                }, {
                  "title": "Reason",
                  "value": "Deployment failure or manual trigger",
                  "short": false
                }]
              }]
            }'

  # Deployment Summary
  deployment-summary:
    name: üìã Deployment Summary
    runs-on: ubuntu-latest
    needs: [pre-deployment, build-and-package, deploy-staging, deploy-production-blue-green, deploy-canary, database-migration, post-deployment]
    if: always()
    steps:
      - name: Generate Deployment Summary
        run: |
          echo "# üöÄ Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "## Deployment Details:" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ needs.pre-deployment.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Strategy**: ${{ needs.pre-deployment.outputs.strategy }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ needs.pre-deployment.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Image**: ${{ needs.build-and-package.outputs.image-tag }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Results:" >> $GITHUB_STEP_SUMMARY
          echo "- **Build**: ${{ needs.build-and-package.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Staging Deploy**: ${{ needs.deploy-staging.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Production Deploy**: ${{ needs.deploy-production-blue-green.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Database Migration**: ${{ needs.database-migration.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Post-deployment**: ${{ needs.post-deployment.result }}" >> $GITHUB_STEP_SUMMARY

      - name: Success Notification
        if: success()
        run: |
          curl -X POST "${{ secrets.SLACK_WEBHOOK_URL }}" \
            -H 'Content-type: application/json' \
            --data '{
              "text": "‚úÖ Deployment successful for ${{ github.repository }}",
              "attachments": [{
                "color": "good",
                "fields": [{
                  "title": "Environment",
                  "value": "${{ needs.pre-deployment.outputs.environment }}",
                  "short": true
                }, {
                  "title": "Version",
                  "value": "${{ needs.pre-deployment.outputs.version }}",
                  "short": true
                }, {
                  "title": "Strategy",
                  "value": "${{ needs.pre-deployment.outputs.strategy }}",
                  "short": true
                }]
              }]
            }'