name: 🚀 Vercel Deployment Pipeline

on:
  push:
    branches: [main, develop, feature/*, hotfix/*]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'preview'
        type: choice
        options:
          - preview
          - staging
          - production
      skip_tests:
        description: 'Skip tests (emergency deployment only)'
        required: false
        default: false
        type: boolean

concurrency:
  group: vercel-deploy-${{ github.ref }}-${{ github.event.inputs.environment || 'auto' }}
  cancel-in-progress: false # Don't cancel Vercel deployments

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  NODE_VERSION: '20'

jobs:
  # Pre-deployment validation
  pre-deployment-checks:
    name: 🔍 Pre-deployment Validation
    runs-on: ubuntu-latest
    if: github.event.inputs.skip_tests != 'true'
    outputs:
      deploy-environment: ${{ steps.determine-env.outputs.environment }}
      deploy-url: ${{ steps.determine-env.outputs.url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine deployment environment
        id: determine-env
        run: |
          if [[ "${{ github.event.inputs.environment }}" != "" ]]; then
            env="${{ github.event.inputs.environment }}"
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            env="production"
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            env="staging"
          else
            env="preview"
          fi
          
          echo "environment=$env" >> $GITHUB_OUTPUT
          
          case "$env" in
            "production")
              echo "url=https://thorbis.com" >> $GITHUB_OUTPUT
              ;;
            "staging")
              echo "url=https://staging.thorbis.com" >> $GITHUB_OUTPUT
              ;;
            *)
              echo "url=https://preview-${{ github.event.number || github.sha }}.thorbis.com" >> $GITHUB_OUTPUT
              ;;
          esac

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install dependencies
        run: |
          npm ci
          cd apps/main && npm ci

      - name: Security check
        run: |
          npm audit --audit-level=moderate
          cd apps/main && npm audit --audit-level=moderate

      - name: Build validation
        run: |
          cd apps/main && npm run build
        env:
          NODE_ENV: production
          NEXT_PUBLIC_VERCEL_ENV: ${{ steps.determine-env.outputs.environment }}

  # Vercel Preview Deployments
  deploy-preview:
    name: 🚀 Deploy Preview
    runs-on: ubuntu-latest
    needs: pre-deployment-checks
    if: |
      (github.event_name == 'pull_request' || 
       (github.event_name == 'push' && github.ref != 'refs/heads/main' && github.ref != 'refs/heads/develop') ||
       github.event.inputs.environment == 'preview') &&
      github.event.inputs.skip_tests != 'true'
    environment:
      name: preview
      url: ${{ steps.deploy.outputs.preview-url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Pull Vercel Environment
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to Vercel Preview
        id: deploy
        run: |
          deployment_url=$(vercel deploy --token=${{ secrets.VERCEL_TOKEN }})
          echo "preview-url=$deployment_url" >> $GITHUB_OUTPUT
          echo "Deployed to: $deployment_url"

      - name: Run preview tests
        run: |
          # Wait for deployment to be ready
          sleep 30
          
          # Basic smoke test
          curl -f "${{ steps.deploy.outputs.preview-url }}" || exit 1
          curl -f "${{ steps.deploy.outputs.preview-url }}/api/health" || exit 1

      - name: Comment PR with preview URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🚀 Preview Deployment Ready!
              
              **Preview URL**: ${{ steps.deploy.outputs.preview-url }}
              
              **Changes**: ${{ github.event.head_commit.message || 'N/A' }}
              **Branch**: ${{ github.head_ref || github.ref_name }}
              **Commit**: ${{ github.sha }}
              
              ### 🧪 Test the deployment:
              - [ ] Homepage loads correctly
              - [ ] Search functionality works
              - [ ] User authentication flows
              - [ ] Business listing features
              - [ ] Mobile responsiveness
              
              *This preview will be automatically updated with new commits.*`
            })

  # Vercel Staging Deployment
  deploy-staging:
    name: 🚀 Deploy Staging
    runs-on: ubuntu-latest
    needs: pre-deployment-checks
    if: |
      (github.ref == 'refs/heads/develop' && github.event_name == 'push') ||
      github.event.inputs.environment == 'staging'
    environment:
      name: staging
      url: https://staging.thorbis.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Pull Vercel Environment
        run: vercel pull --yes --environment=staging --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to Vercel Staging
        id: deploy
        run: |
          deployment_url=$(vercel deploy --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "staging-url=$deployment_url" >> $GITHUB_OUTPUT

      - name: Assign staging domain
        run: |
          vercel alias set ${{ steps.deploy.outputs.staging-url }} staging.thorbis.com --token=${{ secrets.VERCEL_TOKEN }}

      - name: Run staging smoke tests
        run: |
          sleep 60 # Wait for DNS propagation
          
          endpoints=(
            "https://staging.thorbis.com"
            "https://staging.thorbis.com/api/health"
            "https://staging.thorbis.com/search"
            "https://staging.thorbis.com/login"
          )
          
          for endpoint in "${endpoints[@]}"; do
            echo "Testing $endpoint"
            curl -f "$endpoint" || exit 1
          done

      - name: Performance audit on staging
        run: |
          npm install -g @lhci/cli
          lhci autorun --collect.url=https://staging.thorbis.com --assert.assertions.performance=85

      - name: Staging deployment notification
        run: |
          curl -X POST "${{ secrets.SLACK_WEBHOOK_URL }}" \
            -H 'Content-type: application/json' \
            --data '{
              "text": "🚀 Staging deployment successful",
              "attachments": [{
                "color": "good",
                "fields": [{
                  "title": "Environment",
                  "value": "Staging",
                  "short": true
                }, {
                  "title": "URL",
                  "value": "https://staging.thorbis.com",
                  "short": true
                }, {
                  "title": "Branch",
                  "value": "${{ github.ref_name }}",
                  "short": true
                }, {
                  "title": "Commit",
                  "value": "${{ github.sha }}",
                  "short": true
                }]
              }]
            }'

  # Vercel Production Deployment
  deploy-production:
    name: 🚀 Deploy Production
    runs-on: ubuntu-latest
    needs: pre-deployment-checks
    if: |
      (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
      github.event.inputs.environment == 'production'
    environment:
      name: production
      url: https://thorbis.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Pull Vercel Environment
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

      - name: Final security check
        run: |
          npm audit --audit-level=high
          cd apps/main && npm audit --audit-level=high

      - name: Deploy to Vercel Production
        id: deploy
        run: |
          deployment_url=$(vercel deploy --prod --token=${{ secrets.VERCEL_TOKEN }})
          echo "production-url=$deployment_url" >> $GITHUB_OUTPUT

      - name: Assign production domain
        run: |
          vercel alias set ${{ steps.deploy.outputs.production-url }} thorbis.com --token=${{ secrets.VERCEL_TOKEN }}

      - name: Wait for DNS propagation
        run: sleep 120

      - name: Production health check
        run: |
          echo "Running comprehensive production health checks..."
          
          # Critical endpoints that must work
          critical_endpoints=(
            "https://thorbis.com"
            "https://thorbis.com/api/health"
            "https://thorbis.com/search"
            "https://thorbis.com/api/businesses"
          )
          
          for endpoint in "${critical_endpoints[@]}"; do
            echo "Testing critical endpoint: $endpoint"
            response=$(curl -s -o /dev/null -w "%{http_code}:%{time_total}" "$endpoint")
            http_code=$(echo $response | cut -d: -f1)
            response_time=$(echo $response | cut -d: -f2)
            
            if [[ $http_code -lt 200 || $http_code -ge 400 ]]; then
              echo "❌ Critical endpoint failed: $endpoint (HTTP $http_code)"
              exit 1
            fi
            
            if (( $(echo "$response_time > 2.0" | bc -l) )); then
              echo "⚠️ Slow response detected: $endpoint (${response_time}s)"
            fi
            
            echo "✅ $endpoint: HTTP $http_code (${response_time}s)"
          done

      - name: Performance validation
        run: |
          npm install -g @lhci/cli
          lhci autorun --collect.url=https://thorbis.com --assert.assertions.performance=90

      - name: Security headers check
        run: |
          echo "Validating security headers..."
          headers=$(curl -sI https://thorbis.com)
          
          required_headers=(
            "x-frame-options"
            "x-content-type-options"
            "strict-transport-security"
          )
          
          for header in "${required_headers[@]}"; do
            if echo "$headers" | grep -qi "$header"; then
              echo "✅ Security header found: $header"
            else
              echo "❌ Missing security header: $header"
              exit 1
            fi
          done

      - name: Create production deployment record
        run: |
          curl -X POST "${{ secrets.MONITORING_API_URL }}/deployments" \
            -H "Authorization: Bearer ${{ secrets.MONITORING_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
              "environment": "production",
              "version": "${{ github.sha }}",
              "deployment_url": "${{ steps.deploy.outputs.production-url }}",
              "domain": "https://thorbis.com",
              "deployed_at": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'",
              "branch": "${{ github.ref_name }}",
              "commit_message": "${{ github.event.head_commit.message }}",
              "deployer": "${{ github.actor }}"
            }'

      - name: Production deployment notification
        run: |
          curl -X POST "${{ secrets.SLACK_WEBHOOK_URL }}" \
            -H 'Content-type: application/json' \
            --data '{
              "text": "🎉 Production deployment successful!",
              "attachments": [{
                "color": "good",
                "fields": [{
                  "title": "Environment",
                  "value": "Production",
                  "short": true
                }, {
                  "title": "URL",
                  "value": "https://thorbis.com",
                  "short": true
                }, {
                  "title": "Version",
                  "value": "${{ github.sha }}",
                  "short": true
                }, {
                  "title": "Deployed by",
                  "value": "${{ github.actor }}",
                  "short": true
                }]
              }]
            }'

      - name: Enable enhanced monitoring
        run: |
          # Enable enhanced monitoring for 2 hours after production deployment
          curl -X POST "${{ secrets.MONITORING_API_URL }}/alerts/enhance" \
            -H "Authorization: Bearer ${{ secrets.MONITORING_API_TOKEN }}" \
            -d '{
              "duration": 7200,
              "deployment": "${{ github.sha }}",
              "environment": "production",
              "alert_thresholds": {
                "error_rate": 0.5,
                "response_time": 1000,
                "availability": 99.9
              }
            }'

  # Emergency rollback capability
  rollback:
    name: 🔄 Emergency Rollback
    runs-on: ubuntu-latest
    if: failure() && (github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production')
    needs: [deploy-production]
    environment: production
    steps:
      - name: Setup Vercel CLI
        run: npm install -g vercel@latest

      - name: Get previous deployment
        id: previous
        run: |
          # Get the second most recent deployment (previous stable)
          previous_deployment=$(vercel ls --token=${{ secrets.VERCEL_TOKEN }} | grep "thorbis.com" | sed -n '2p' | awk '{print $1}')
          echo "previous-deployment=$previous_deployment" >> $GITHUB_OUTPUT

      - name: Rollback to previous deployment
        run: |
          vercel alias set ${{ steps.previous.outputs.previous-deployment }} thorbis.com --token=${{ secrets.VERCEL_TOKEN }}

      - name: Verify rollback
        run: |
          sleep 60 # Wait for DNS propagation
          curl -f https://thorbis.com || exit 1

      - name: Rollback notification
        run: |
          curl -X POST "${{ secrets.SLACK_EMERGENCY_WEBHOOK }}" \
            -H 'Content-type: application/json' \
            --data '{
              "text": "🚨 EMERGENCY ROLLBACK EXECUTED",
              "attachments": [{
                "color": "danger",
                "fields": [{
                  "title": "Environment",
                  "value": "Production",
                  "short": true
                }, {
                  "title": "Rolled back to",
                  "value": "${{ steps.previous.outputs.previous-deployment }}",
                  "short": true
                }, {
                  "title": "Reason",
                  "value": "Production deployment failure",
                  "short": false
                }]
              }]
            }'

  # Deployment summary
  deployment-summary:
    name: 📊 Deployment Summary
    runs-on: ubuntu-latest
    needs: [deploy-preview, deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Generate deployment report
        run: |
          echo "# 🚀 Vercel Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Deployment Results:" >> $GITHUB_STEP_SUMMARY
          echo "- **Preview**: ${{ needs.deploy-preview.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Staging**: ${{ needs.deploy-staging.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Production**: ${{ needs.deploy-production.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp**: $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_STEP_SUMMARY