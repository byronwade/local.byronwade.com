name: Enterprise CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  release:
    types: [published]

# Concurrency to prevent multiple runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  BUN_VERSION: 'latest'

jobs:
  # Security and Quality Checks
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}
          
      - name: Install dependencies
        run: bun install --frozen-lockfile
        
      - name: Security audit
        run: bun audit
        
      - name: Dependency vulnerability scan
        run: |
          bun add -g @cyclonedx/cyclonedx-npm
          cyclonedx-npm --output-file sbom.json
          
      - name: SAST scan
        uses: github/super-linter/slim@v5
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          LINTER_RULES_PATH: .github/linters
          SUPPRESS_POSSUM: true

  # Code Quality and Standards
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}
          
      - name: Install dependencies
        run: bun install --frozen-lockfile
        
      - name: Lint
        run: bun run lint
        
      - name: Type check
        run: bun run type-check
        
      - name: Format check
        run: bun run format:check
        
      - name: Bundle analysis
        run: |
          bun run build
          bun run analyze

  # Unit and Integration Tests
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-type: [unit, integration, component]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}
          
      - name: Install dependencies
        run: bun install --frozen-lockfile
        
      - name: Run tests
        run: bun run test:${{ matrix.test-type }}
        env:
          NODE_ENV: test
          
      - name: Upload coverage
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/lcov.info
          flags: ${{ matrix.test-type }}

  # Performance Testing
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}
          
      - name: Install dependencies
        run: bun install --frozen-lockfile
        
      - name: Build application
        run: bun run build
        
      - name: Performance audit
        run: |
          bun add -g lighthouse-ci
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # End-to-End Tests
  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}
          
      - name: Install dependencies
        run: bun install --frozen-lockfile
        
      - name: Install Playwright
        run: bun x playwright install --with-deps
        
      - name: Build and start application
        run: |
          bun run build
          bun run start &
          sleep 10
          
      - name: Run E2E tests
        run: bun run test:e2e
        
      - name: Upload E2E artifacts
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: e2e-artifacts
          path: |
            test-results/
            playwright-report/

  # Build and Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [security-audit, code-quality, test, performance]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment:
      name: staging
      url: https://staging.example.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}
          
      - name: Install dependencies
        run: bun install --frozen-lockfile
        
      - name: Build for staging
        run: bun run build
        env:
          NODE_ENV: production
          NEXT_PUBLIC_ENV: staging
          
      - name: Deploy to Staging
        run: bun run deploy:staging
        env:
          DEPLOY_TOKEN: ${{ secrets.STAGING_DEPLOY_TOKEN }}
          
      - name: Health check
        run: |
          sleep 30
          curl -f https://staging.example.com/api/health || exit 1
          
      - name: Run smoke tests
        run: bun run test:smoke:staging

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [security-audit, code-quality, test, performance, e2e]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: production
      url: https://example.com
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}
          
      - name: Install dependencies
        run: bun install --frozen-lockfile
        
      - name: Build for production
        run: bun run build
        env:
          NODE_ENV: production
          NEXT_PUBLIC_ENV: production
          
      - name: Security scan of build
        run: |
          bun add -g @cyclonedx/cyclonedx-npm
          cyclonedx-npm --output-file build-sbom.json
          
      - name: Deploy to Production
        run: bun run deploy:production
        env:
          DEPLOY_TOKEN: ${{ secrets.PRODUCTION_DEPLOY_TOKEN }}
          
      - name: Health check
        run: |
          sleep 60
          curl -f https://example.com/api/health || exit 1
          
      - name: Run smoke tests
        run: bun run test:smoke:production
        
      - name: Update deployment status
        run: |
          curl -X POST "${{ secrets.SLACK_WEBHOOK_URL }}" \
            -H 'Content-type: application/json' \
            --data '{"text":"ðŸš€ Production deployment successful for commit ${{ github.sha }}"}'

  # Database Migrations
  migrate:
    name: Database Migration
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}
          
      - name: Install dependencies
        run: bun install --frozen-lockfile
        
      - name: Run migrations
        run: bun run db:migrate
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

  # Release automation
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Generate changelog
        id: changelog
        run: |
          # Generate changelog from commits
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          git log --oneline --since="$(git describe --tags --abbrev=0 2>/dev/null || echo 'HEAD~10')..HEAD" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            ## Changes
            ${{ steps.changelog.outputs.CHANGELOG }}
            
            ## Deployment
            - Staging: https://staging.example.com
            - Production: https://example.com
          draft: false
          prerelease: false

  # Monitoring and Alerts
  post-deployment:
    name: Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Setup monitoring alerts
        run: |
          # Enable enhanced monitoring for 1 hour after deployment
          curl -X POST "${{ secrets.MONITORING_API_URL }}/alerts/enhance" \
            -H "Authorization: Bearer ${{ secrets.MONITORING_API_TOKEN }}" \
            -d '{"duration": 3600, "deployment": "${{ github.sha }}"}'
            
      - name: Verify deployment metrics
        run: |
          sleep 300  # Wait 5 minutes for metrics to stabilize
          # Check key metrics are within expected ranges
          bun run verify:deployment-metrics
        env:
          MONITORING_API_TOKEN: ${{ secrets.MONITORING_API_TOKEN }}