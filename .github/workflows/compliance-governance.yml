name: 📋 Compliance & Governance

on:
  push:
    branches: [main, develop, release/*]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: '0 6 * * 1' # Weekly compliance check on Mondays at 6 AM UTC
    - cron: '0 2 1 * *' # Monthly comprehensive audit on 1st of each month at 2 AM UTC
  workflow_dispatch:
    inputs:
      audit_type:
        description: 'Type of compliance audit'
        required: true
        default: 'standard'
        type: choice
        options:
          - standard
          - gdpr
          - security
          - accessibility
          - comprehensive

concurrency:
  group: compliance-${{ github.ref }}-${{ github.event.inputs.audit_type || 'standard' }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  BUN_VERSION: 'latest'

jobs:
  # GDPR Compliance Audit
  gdpr-compliance:
    name: 🇪🇺 GDPR Compliance Audit
    runs-on: ubuntu-latest
    if: github.event.inputs.audit_type == 'gdpr' || github.event.inputs.audit_type == 'comprehensive' || github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: GDPR Code Analysis
        id: gdpr-analysis
        run: |
          echo "Analyzing code for GDPR compliance..."
          
          # Check for data collection patterns
          data_collection=$(grep -r "collect.*data\|personal.*information\|user.*data" --include="*.js" --include="*.ts" --include="*.jsx" --include="*.tsx" . | wc -l)
          
          # Check for consent mechanisms
          consent_patterns=$(grep -r "consent\|cookie.*accept\|privacy.*policy" --include="*.js" --include="*.ts" --include="*.jsx" --include="*.tsx" . | wc -l)
          
          # Check for data deletion/export features
          data_portability=$(grep -r "export.*data\|delete.*account\|data.*portability" --include="*.js" --include="*.ts" --include="*.jsx" --include="*.tsx" . | wc -l)
          
          # Check for privacy policy links
          privacy_policy=$(grep -r "privacy.*policy\|data.*protection" --include="*.js" --include="*.ts" --include="*.jsx" --include="*.tsx" --include="*.md" . | wc -l)
          
          echo "data_collection=$data_collection" >> $GITHUB_OUTPUT
          echo "consent_patterns=$consent_patterns" >> $GITHUB_OUTPUT
          echo "data_portability=$data_portability" >> $GITHUB_OUTPUT
          echo "privacy_policy=$privacy_policy" >> $GITHUB_OUTPUT

      - name: Cookie Compliance Check
        id: cookie-compliance
        run: |
          echo "Checking cookie compliance..."
          
          # Check for cookie consent implementation
          cookie_consent=$(grep -r "cookie.*consent\|accept.*cookies" --include="*.js" --include="*.ts" --include="*.jsx" --include="*.tsx" . | wc -l)
          
          # Check for cookie categorization
          cookie_categories=$(grep -r "essential.*cookies\|analytics.*cookies\|marketing.*cookies" --include="*.js" --include="*.ts" --include="*.jsx" --include="*.tsx" . | wc -l)
          
          echo "cookie_consent=$cookie_consent" >> $GITHUB_OUTPUT
          echo "cookie_categories=$cookie_categories" >> $GITHUB_OUTPUT

      - name: Data Processing Documentation Check
        run: |
          echo "Checking data processing documentation..."
          
          required_docs=(
            "docs/privacy-policy.md"
            "docs/data-processing.md"
            "docs/cookie-policy.md"
            "docs/gdpr-compliance.md"
          )
          
          missing_docs=()
          for doc in "${required_docs[@]}"; do
            if [[ ! -f "$doc" ]]; then
              missing_docs+=("$doc")
            fi
          done
          
          if [[ ${#missing_docs[@]} -gt 0 ]]; then
            echo "⚠️ Missing GDPR documentation:"
            printf '%s\n' "${missing_docs[@]}"
          else
            echo "✅ All GDPR documentation found"
          fi

      - name: Generate GDPR Compliance Report
        run: |
          echo "# 🇪🇺 GDPR Compliance Report" >> gdpr-report.md
          echo "" >> gdpr-report.md
          echo "## Data Collection Analysis" >> gdpr-report.md
          echo "- Data collection references: ${{ steps.gdpr-analysis.outputs.data_collection }}" >> gdpr-report.md
          echo "- Consent mechanisms: ${{ steps.gdpr-analysis.outputs.consent_patterns }}" >> gdpr-report.md
          echo "- Data portability features: ${{ steps.gdpr-analysis.outputs.data_portability }}" >> gdpr-report.md
          echo "- Privacy policy references: ${{ steps.gdpr-analysis.outputs.privacy_policy }}" >> gdpr-report.md
          echo "" >> gdpr-report.md
          echo "## Cookie Compliance" >> gdpr-report.md
          echo "- Cookie consent implementation: ${{ steps.cookie-compliance.outputs.cookie_consent }}" >> gdpr-report.md
          echo "- Cookie categorization: ${{ steps.cookie-compliance.outputs.cookie_categories }}" >> gdpr-report.md

      - name: Upload GDPR Report
        uses: actions/upload-artifact@v4
        with:
          name: gdpr-compliance-report
          path: gdpr-report.md

  # Accessibility Compliance (WCAG)
  accessibility-compliance:
    name: ♿ Accessibility Compliance
    runs-on: ubuntu-latest
    if: github.event.inputs.audit_type == 'accessibility' || github.event.inputs.audit_type == 'comprehensive' || github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Build application
        run: bun run build

      - name: Start application
        run: |
          bun run start &
          sleep 15

      # WCAG 2.1 AA Compliance Check
      - name: axe-core Accessibility Audit
        id: axe-audit
        run: |
          bun add -g @axe-core/cli
          
          pages=(
            "http://localhost:3000"
            "http://localhost:3000/search"
            "http://localhost:3000/business/sample"
            "http://localhost:3000/login"
            "http://localhost:3000/signup"
          )
          
          total_violations=0
          critical_violations=0
          
          for page in "${pages[@]}"; do
            echo "Testing accessibility for $page"
            axe "$page" --reporter json --output-file "axe-results-$(basename $page).json" || true
            
            if [[ -f "axe-results-$(basename $page).json" ]]; then
              violations=$(jq '.violations | length' "axe-results-$(basename $page).json")
              critical=$(jq '[.violations[] | select(.impact == "critical")] | length' "axe-results-$(basename $page).json")
              
              total_violations=$((total_violations + violations))
              critical_violations=$((critical_violations + critical))
            fi
          done
          
          echo "total_violations=$total_violations" >> $GITHUB_OUTPUT
          echo "critical_violations=$critical_violations" >> $GITHUB_OUTPUT

      # Lighthouse Accessibility Audit
      - name: Lighthouse Accessibility Audit
        run: |
          bun add -g @lhci/cli
          lhci autorun --collect.url=http://localhost:3000 --assert.assertions.accessibility=100

      - name: Color Contrast Analysis
        run: |
          echo "Analyzing color contrast compliance..."
          # Check CSS files for color contrast issues
          bun add -g color-contrast-checker
          # Implement color contrast checking logic

      - name: Generate Accessibility Report
        run: |
          echo "# ♿ Accessibility Compliance Report" >> accessibility-report.md
          echo "" >> accessibility-report.md
          echo "## WCAG 2.1 AA Compliance" >> accessibility-report.md
          echo "- Total violations: ${{ steps.axe-audit.outputs.total_violations }}" >> accessibility-report.md
          echo "- Critical violations: ${{ steps.axe-audit.outputs.critical_violations }}" >> accessibility-report.md
          echo "" >> accessibility-report.md
          echo "## Recommendations" >> accessibility-report.md
          
          if [[ ${{ steps.axe-audit.outputs.critical_violations }} -gt 0 ]]; then
            echo "⚠️ Critical accessibility issues found that must be addressed immediately." >> accessibility-report.md
          else
            echo "✅ No critical accessibility issues found." >> accessibility-report.md
          fi

      - name: Upload Accessibility Report
        uses: actions/upload-artifact@v4
        with:
          name: accessibility-compliance-report
          path: |
            accessibility-report.md
            axe-results-*.json
            .lighthouseci/

  # Security Compliance
  security-compliance:
    name: 🔒 Security Compliance
    runs-on: ubuntu-latest
    if: github.event.inputs.audit_type == 'security' || github.event.inputs.audit_type == 'comprehensive' || github.event_name == 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: OWASP Top 10 Compliance Check
        id: owasp-check
        run: |
          echo "Checking OWASP Top 10 compliance..."
          
          # A01: Broken Access Control
          access_control=$(grep -r "authorization\|access.*control\|permission" --include="*.js" --include="*.ts" . | wc -l)
          
          # A02: Cryptographic Failures
          crypto_usage=$(grep -r "encrypt\|decrypt\|hash\|crypto" --include="*.js" --include="*.ts" . | wc -l)
          
          # A03: Injection
          input_validation=$(grep -r "sanitize\|validate\|escape" --include="*.js" --include="*.ts" . | wc -l)
          
          # A04: Insecure Design
          security_headers=$(grep -r "helmet\|security.*headers" --include="*.js" --include="*.ts" . | wc -l)
          
          # A05: Security Misconfiguration
          config_security=$(grep -r "security.*config\|secure.*headers" --include="*.js" --include="*.ts" . | wc -l)
          
          echo "access_control=$access_control" >> $GITHUB_OUTPUT
          echo "crypto_usage=$crypto_usage" >> $GITHUB_OUTPUT
          echo "input_validation=$input_validation" >> $GITHUB_OUTPUT
          echo "security_headers=$security_headers" >> $GITHUB_OUTPUT
          echo "config_security=$config_security" >> $GITHUB_OUTPUT

      - name: API Security Analysis
        run: |
          echo "Analyzing API security..."
          
          # Check for rate limiting implementation
          rate_limiting=$(grep -r "rate.*limit\|throttle" --include="*.js" --include="*.ts" . | wc -l)
          
          # Check for authentication middleware
          auth_middleware=$(grep -r "authenticate\|authorize" --include="*.js" --include="*.ts" . | wc -l)
          
          # Check for input validation
          validation=$(grep -r "joi\|yup\|zod" --include="*.js" --include="*.ts" . | wc -l)
          
          echo "API Security Analysis:"
          echo "- Rate limiting implementations: $rate_limiting"
          echo "- Authentication middleware: $auth_middleware"
          echo "- Input validation: $validation"

      - name: Security Headers Verification
        run: |
          echo "Verifying security headers configuration..."
          
          if [[ -f "next.config.js" ]]; then
            headers_config=$(grep -E "(X-Frame-Options|Content-Security-Policy|X-Content-Type-Options|Strict-Transport-Security)" next.config.js | wc -l)
            echo "Security headers configured: $headers_config"
          fi

      - name: Generate Security Compliance Report
        run: |
          echo "# 🔒 Security Compliance Report" >> security-report.md
          echo "" >> security-report.md
          echo "## OWASP Top 10 Analysis" >> security-report.md
          echo "- Access control implementations: ${{ steps.owasp-check.outputs.access_control }}" >> security-report.md
          echo "- Cryptographic usage: ${{ steps.owasp-check.outputs.crypto_usage }}" >> security-report.md
          echo "- Input validation: ${{ steps.owasp-check.outputs.input_validation }}" >> security-report.md
          echo "- Security headers: ${{ steps.owasp-check.outputs.security_headers }}" >> security-report.md
          echo "- Configuration security: ${{ steps.owasp-check.outputs.config_security }}" >> security-report.md

      - name: Upload Security Report
        uses: actions/upload-artifact@v4
        with:
          name: security-compliance-report
          path: security-report.md

  # Code Quality Standards
  code-quality-standards:
    name: 📏 Code Quality Standards
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Code Complexity Analysis
        id: complexity
        run: |
          bun add -g complexity-report
          complexity-report --format json --output complexity.json src/
          
          avg_complexity=$(jq '.summary.average.sloc.physical' complexity.json)
          max_complexity=$(jq '.summary.maximum.cyclomatic' complexity.json)
          
          echo "avg_complexity=$avg_complexity" >> $GITHUB_OUTPUT
          echo "max_complexity=$max_complexity" >> $GITHUB_OUTPUT

      - name: Test Coverage Analysis
        run: |
          bun run test:coverage
          
          if [[ -f "coverage/coverage-summary.json" ]]; then
            coverage=$(jq '.total.lines.pct' coverage/coverage-summary.json)
            echo "Test coverage: $coverage%"
            
            if (( $(echo "$coverage < 80" | bc -l) )); then
              echo "⚠️ Test coverage below 80% threshold"
            fi
          fi

      - name: Documentation Coverage
        run: |
          echo "Analyzing documentation coverage..."
          
          # Count documented functions vs total functions
          total_functions=$(grep -r "function\|const.*=.*=>" --include="*.js" --include="*.ts" . | wc -l)
          documented_functions=$(grep -rB1 "\/\*\*\|\/\/.*@" --include="*.js" --include="*.ts" . | grep -E "function|const.*=.*=>" | wc -l)
          
          if [[ $total_functions -gt 0 ]]; then
            doc_coverage=$(echo "scale=2; $documented_functions * 100 / $total_functions" | bc)
            echo "Documentation coverage: $doc_coverage%"
          fi

      - name: Generate Code Quality Report
        run: |
          echo "# 📏 Code Quality Standards Report" >> quality-report.md
          echo "" >> quality-report.md
          echo "## Complexity Metrics" >> quality-report.md
          echo "- Average complexity: ${{ steps.complexity.outputs.avg_complexity }}" >> quality-report.md
          echo "- Maximum complexity: ${{ steps.complexity.outputs.max_complexity }}" >> quality-report.md

      - name: Upload Quality Report
        uses: actions/upload-artifact@v4
        with:
          name: code-quality-report
          path: |
            quality-report.md
            complexity.json
            coverage/

  # License Compliance
  license-compliance:
    name: 📄 License Compliance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: License Analysis
        id: license-analysis
        run: |
          bun add -g license-checker
          
          # Generate license report
          license-checker --production --csv --out licenses.csv
          
          # Check for forbidden licenses
          forbidden_licenses=$(license-checker --production --failOn 'GPL-2.0;GPL-3.0;AGPL-1.0;AGPL-3.0' --summary | grep -c "FAIL" || echo "0")
          
          # Count unique licenses
          unique_licenses=$(license-checker --production --summary | grep -c "└─" || echo "0")
          
          echo "forbidden_licenses=$forbidden_licenses" >> $GITHUB_OUTPUT
          echo "unique_licenses=$unique_licenses" >> $GITHUB_OUTPUT

      - name: SPDX License Validation
        run: |
          echo "Validating SPDX license identifiers..."
          
          # Check package.json for valid SPDX license
          if [[ -f "package.json" ]]; then
            license=$(jq -r '.license // "none"' package.json)
            echo "Project license: $license"
            
            # Validate against SPDX license list
            valid_spdx_licenses=("MIT" "Apache-2.0" "BSD-3-Clause" "BSD-2-Clause" "ISC")
            
            if [[ " ${valid_spdx_licenses[@]} " =~ " ${license} " ]]; then
              echo "✅ Valid SPDX license identifier"
            else
              echo "⚠️ Invalid or missing SPDX license identifier"
            fi
          fi

      - name: Generate License Report
        run: |
          echo "# 📄 License Compliance Report" >> license-report.md
          echo "" >> license-report.md
          echo "## License Summary" >> license-report.md
          echo "- Forbidden licenses found: ${{ steps.license-analysis.outputs.forbidden_licenses }}" >> license-report.md
          echo "- Unique licenses in use: ${{ steps.license-analysis.outputs.unique_licenses }}" >> license-report.md
          echo "" >> license-report.md
          echo "## License Details" >> license-report.md
          echo "\`\`\`csv" >> license-report.md
          head -20 licenses.csv >> license-report.md
          echo "\`\`\`" >> license-report.md

      - name: Upload License Report
        uses: actions/upload-artifact@v4
        with:
          name: license-compliance-report
          path: |
            license-report.md
            licenses.csv

  # API Documentation Compliance
  api-documentation:
    name: 📚 API Documentation Compliance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: API Documentation Coverage
        run: |
          echo "Analyzing API documentation coverage..."
          
          # Find API routes
          api_routes=$(find app/api -name "*.js" -o -name "*.ts" | wc -l)
          
          # Check for OpenAPI/Swagger documentation
          openapi_spec=$(find . -name "*.yml" -o -name "*.yaml" -o -name "*.json" | grep -i "openapi\|swagger" | wc -l)
          
          # Check for API documentation in docs
          api_docs=$(find docs -name "*api*" -o -name "*endpoint*" | wc -l)
          
          echo "API Documentation Analysis:"
          echo "- API routes found: $api_routes"
          echo "- OpenAPI specifications: $openapi_spec"
          echo "- API documentation files: $api_docs"

      - name: Validate OpenAPI Specification
        run: |
          if [[ -f "docs/openapi.yml" ]] || [[ -f "docs/swagger.yml" ]]; then
            echo "Validating OpenAPI specification..."
            bun add -g @apidevtools/swagger-parser
            # Add OpenAPI validation logic
          else
            echo "⚠️ No OpenAPI specification found"
          fi

      - name: Generate API Documentation Report
        run: |
          echo "# 📚 API Documentation Report" >> api-docs-report.md
          echo "" >> api-docs-report.md
          echo "## Coverage Analysis" >> api-docs-report.md
          echo "- API routes requiring documentation" >> api-docs-report.md
          echo "- OpenAPI specification status" >> api-docs-report.md
          echo "- Documentation completeness score" >> api-docs-report.md

      - name: Upload API Documentation Report
        uses: actions/upload-artifact@v4
        with:
          name: api-documentation-report
          path: api-docs-report.md

  # Comprehensive Compliance Summary
  compliance-summary:
    name: 📊 Compliance Summary
    runs-on: ubuntu-latest
    needs: [gdpr-compliance, accessibility-compliance, security-compliance, code-quality-standards, license-compliance, api-documentation]
    if: always()
    steps:
      - name: Download All Reports
        uses: actions/download-artifact@v4

      - name: Generate Comprehensive Report
        run: |
          echo "# 📋 Comprehensive Compliance Report" >> compliance-summary.md
          echo "" >> compliance-summary.md
          echo "**Generated**: $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> compliance-summary.md
          echo "" >> compliance-summary.md
          echo "## Compliance Areas Assessed" >> compliance-summary.md
          echo "- **GDPR Compliance**: ${{ needs.gdpr-compliance.result }}" >> compliance-summary.md
          echo "- **Accessibility (WCAG)**: ${{ needs.accessibility-compliance.result }}" >> compliance-summary.md
          echo "- **Security Standards**: ${{ needs.security-compliance.result }}" >> compliance-summary.md
          echo "- **Code Quality**: ${{ needs.code-quality-standards.result }}" >> compliance-summary.md
          echo "- **License Compliance**: ${{ needs.license-compliance.result }}" >> compliance-summary.md
          echo "- **API Documentation**: ${{ needs.api-documentation.result }}" >> compliance-summary.md
          echo "" >> compliance-summary.md
          
          # Calculate overall compliance score
          passed=0
          total=6
          
          for result in "${{ needs.gdpr-compliance.result }}" "${{ needs.accessibility-compliance.result }}" "${{ needs.security-compliance.result }}" "${{ needs.code-quality-standards.result }}" "${{ needs.license-compliance.result }}" "${{ needs.api-documentation.result }}"; do
            if [[ "$result" == "success" ]]; then
              passed=$((passed + 1))
            fi
          done
          
          compliance_score=$(echo "scale=1; $passed * 100 / $total" | bc)
          echo "## Overall Compliance Score: $compliance_score%" >> compliance-summary.md

      - name: Upload Comprehensive Report
        uses: actions/upload-artifact@v4
        with:
          name: comprehensive-compliance-report
          path: compliance-summary.md

      - name: Compliance Notification
        run: |
          # Determine compliance status
          if [[ ${{ contains(needs.*.result, 'failure') }} == true ]]; then
            status="failed"
            color="danger"
            emoji="❌"
          else
            status="passed"
            color="good"
            emoji="✅"
          fi
          
          curl -X POST "${{ secrets.SLACK_WEBHOOK_URL }}" \
            -H 'Content-type: application/json' \
            --data '{
              "text": "'$emoji' Compliance audit '$status' for ${{ github.repository }}",
              "attachments": [{
                "color": "'$color'",
                "fields": [{
                  "title": "Audit Type",
                  "value": "${{ github.event.inputs.audit_type || 'scheduled' }}",
                  "short": true
                }, {
                  "title": "Branch",
                  "value": "${{ github.ref_name }}",
                  "short": true
                }, {
                  "title": "Timestamp",
                  "value": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'",
                  "short": false
                }]
              }]
            }'