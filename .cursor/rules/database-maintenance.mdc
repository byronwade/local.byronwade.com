---
alwaysApply: true
---

# Database Maintenance & Clean Architecture Rules

## üéØ CORE PRINCIPLE: Zero Database Debt
**Every database change must be intentional, documented, and cleanup-ready.**

## üìä Database Health Monitoring

### Required Tools
#### **MCP Supabase Tools (Primary)**
- `mcp_supabase_list_tables` - Monitor table structure and relationships
- `mcp_supabase_execute_sql` - Execute performance queries and health checks
- `mcp_supabase_apply_migration` - Safe schema changes with rollback capability
- `mcp_supabase_get_logs` - Monitor database performance and errors
- `mcp_supabase_get_advisors` - Check for security and performance issues

#### **Legacy Tools (Backup)**
- Use [lib/supabase/client.ts](mdc:lib/supabase/client.ts) for all database operations
- Reference [lib/supabase/complete_schema.sql](mdc:lib/supabase/complete_schema.sql) for the complete schema structure

### Performance-First Database Rules
```javascript
// ALWAYS implement these patterns in database operations
const databaseBestPractices = {
  // 1. Query optimization
  indexing: 'Create indexes for all foreign keys and frequently queried columns',
  caching: 'Implement query caching with appropriate TTL',
  pagination: 'Always paginate large result sets',
  
  // 2. Data cleanup
  softDeletes: 'Use soft deletes with cleanup jobs',
  archiving: 'Archive old data instead of hard deletion',
  orphanedData: 'Prevent orphaned records with proper cascading',
  
  // 3. Migration safety
  backups: 'Always backup before schema changes',
  rollback: 'Ensure all migrations are reversible',
  testing: 'Test migrations on staging first'
};
```

## üßπ Automatic Data Cleanup Strategy

### MCP-Powered Cleanup Workflow
```javascript
// Use MCP tools for automated cleanup
async function performDatabaseCleanup() {
  // 1. Check for security and performance issues
  const securityIssues = await mcp_supabase_get_advisors({ type: 'security' });
  const performanceIssues = await mcp_supabase_get_advisors({ type: 'performance' });
  
  // 2. Execute cleanup migrations
  if (securityIssues.length === 0) {
    await mcp_supabase_apply_migration({
      name: 'cleanup_old_analytics',
      query: cleanupQueries.analytics
    });
  }
  
  // 3. Monitor results
  const logs = await mcp_supabase_get_logs({ service: 'postgres' });
  
  // 4. Verify table health
  const tables = await mcp_supabase_list_tables({ schemas: ['public'] });
}
```

### Tables Requiring Regular Cleanup
1. **Analytics Tables**: `user_analytics`, `business_analytics`, `local_hub_analytics`
   - Archive data older than 24 months using MCP migrations
   - Aggregate older data into summary tables

2. **Activity Tables**: `user_activities`, `local_hub_activities`
   - Keep only last 12 months of detailed activities
   - Archive older activities using MCP tools

3. **Performance Tables**: `performance_metrics`, `analytics_events`
   - Auto-expire based on timestamps
   - Clean up using scheduled MCP migrations

### MCP-Based Cleanup Templates
```sql
-- Use mcp_supabase_apply_migration for safe cleanup
-- Example: Archive old analytics data
DELETE FROM user_analytics 
WHERE created_at < NOW() - INTERVAL '24 months';

-- Archive old activities
DELETE FROM user_activities 
WHERE created_at < NOW() - INTERVAL '12 months';

-- Clean up performance metrics
DELETE FROM performance_metrics 
WHERE created_at < NOW() - INTERVAL '6 months';
```

## üîÑ Feature Development Database Rules

### When Adding New Features:
1. **Schema Changes**:
   - Update [lib/supabase/complete_schema.sql](mdc:lib/supabase/complete_schema.sql)
   - Create migration script in `scripts/migrations/`
   - Add rollback plan

2. **New Tables**:
   - Follow naming conventions: `{entity}_{purpose}` (e.g., `user_analytics`)
   - Include standard columns: `id`, `created_at`, `updated_at`
   - Add appropriate indexes and constraints
   - Plan data lifecycle (retention, archiving, cleanup)

3. **Data Relationships**:
   - Use proper foreign key constraints
   - Implement CASCADE DELETE where appropriate
   - Prevent orphaned data with referential integrity

### Required Validation Checks
```javascript
// ALWAYS run these checks before deploying new features
const preDeploymentChecks = [
  'schema_completeness: node scripts/verify-schema.js',
  'foreign_key_integrity: Check all FK constraints',
  'index_performance: Analyze query performance',
  'data_cleanup_plan: Document cleanup strategy',
  'rollback_procedure: Test rollback capability'
];
```

## üìà Performance Monitoring

### Critical Metrics to Track
- Query execution time (target: <300ms average)
- Database connection pool usage (<70%)
- Index hit ratio (>95%)
- Table sizes and growth rates
- Orphaned record counts

### Alert Thresholds
```javascript
const performanceAlerts = {
  slowQueries: 'Alert if query >1000ms',
  databaseSize: 'Alert if growth >20% monthly',
  orphanedRecords: 'Alert if orphaned data detected',
  indexMiss: 'Alert if index hit ratio <90%',
  connectionPool: 'Alert if pool usage >80%'
};
```

## üõ†Ô∏è MCP-Powered Maintenance

### Automated Maintenance Schedule
1. **Daily**: MCP-based security and performance checks
2. **Weekly**: Automated cleanup using MCP migrations  
3. **Monthly**: Archive old data via MCP tools
4. **Quarterly**: Full database health assessment

### MCP Maintenance Workflow
```javascript
// Daily Database Health Check
async function dailyHealthCheck() {
  // Check for security vulnerabilities
  const securityAdvisors = await mcp_supabase_get_advisors({ type: 'security' });
  
  // Monitor performance issues
  const performanceAdvisors = await mcp_supabase_get_advisors({ type: 'performance' });
  
  // Check recent database logs
  const recentLogs = await mcp_supabase_get_logs({ service: 'postgres' });
  
  // Generate report
  return {
    security: securityAdvisors,
    performance: performanceAdvisors,
    logs: recentLogs,
    timestamp: new Date().toISOString()
  };
}

// Weekly Cleanup Automation
async function weeklyCleanup() {
  await mcp_supabase_apply_migration({
    name: `weekly_cleanup_${Date.now()}`,
    query: `
      -- Clean old performance metrics
      DELETE FROM performance_metrics 
      WHERE created_at < NOW() - INTERVAL '3 months';
      
      -- Clean old analytics events
      DELETE FROM analytics_events 
      WHERE created_at < NOW() - INTERVAL '6 months';
    `
  });
}

// Monthly Data Archival
async function monthlyArchival() {
  const cleanupMigrations = [
    'archive_old_user_analytics',
    'archive_old_business_analytics', 
    'archive_old_activities'
  ];
  
  for (const migrationName of cleanupMigrations) {
    await mcp_supabase_apply_migration({
      name: migrationName,
      query: getArchivalQuery(migrationName)
    });
  }
}
```

## üö® Red Flags to Avoid

### Never Allow:
- Tables without cleanup strategy
- Unlimited data growth without archiving
- Missing foreign key constraints
- Queries without proper indexing
- Schema changes without migration scripts
- Data without planned lifecycle management

### Immediate Action Required:
- Orphaned records detected
- Query performance degradation
- Database size growing >50% monthly
- Missing indexes on foreign keys
- Tables without `updated_at` timestamps

## üí° MCP Best Practices Summary

1. **Plan Data Lifecycle**: Every piece of data needs a cleanup plan using MCP migrations
2. **Monitor Performance**: Use `mcp_supabase_get_advisors` for continuous monitoring
3. **Automate Cleanup**: Use `mcp_supabase_apply_migration` for scheduled maintenance
4. **Document Changes**: All schema changes via MCP migrations are auto-documented
5. **Test Thoroughly**: Always test MCP migrations on staging before production
6. **Maintain Backwards Compatibility**: Use MCP migration rollback capabilities

### üöÄ MCP Integration Advantages
- **Real-time Monitoring**: Direct access to Supabase advisors and logs
- **Safe Migrations**: Built-in rollback and error handling
- **Performance Tracking**: Automatic logging of database operations
- **Security Scanning**: Continuous vulnerability detection
- **Zero-Downtime**: Migrations designed for production safety

### üéØ MCP Workflow Best Practices
```javascript
// Always follow this pattern for database changes
async function safeDatabaseOperation() {
  // 1. Check current health
  const health = await mcp_supabase_get_advisors({ type: 'performance' });
  
  // 2. Apply migration if safe
  if (health.length === 0) {
    const result = await mcp_supabase_apply_migration({
      name: 'descriptive_migration_name',
      query: sqlQuery
    });
  }
  
  // 3. Verify result
  const logs = await mcp_supabase_get_logs({ service: 'postgres' });
  
  // 4. Monitor for issues
  const newHealth = await mcp_supabase_get_advisors({ type: 'security' });
}
```

**Remember: MCP tools provide direct database access - use responsibly for maximum performance and security.**